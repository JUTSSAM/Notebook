<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Bonjour.Yang</title>
    <link>http://j.noloss.cn/post/</link>
    <description>Recent content in Posts on Bonjour.Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 26 Feb 2019 20:51:47 +0800</lastBuildDate>
    
	<atom:link href="http://j.noloss.cn/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java基础知识</title>
      <link>http://j.noloss.cn/post/java_base/</link>
      <pubDate>Tue, 26 Feb 2019 20:51:47 +0800</pubDate>
      
      <guid>http://j.noloss.cn/post/java_base/</guid>
      <description>[TOC]
I Overview:
1 ) 简单性
2 ) 面向对象
3 ) 分布式
4 ) 健壮性
5 ) 安全性
6 ) 体系结构中立
7 ) 可移植性
8 ) 解释型
9 ) 高性能
10 ) 多线程
11 ) 动态性
String -&amp;gt; Integer
Integer.parseInt(String s);
double/integer -&amp;gt; Stirng
String.valueOf(element);
面向对象程序设计 反射与代理 接口与内部类 异常处理 泛型程序设计 集合框架 事件监听器模型 并行 Swing UI II 流API 文件处理与正则表达式 数据库 XML处理 注释 国际化 网络编程 高级GUI组件 高级图形 原生方法 List 1
.add(element) 增加元素</description>
    </item>
    
    <item>
      <title>[Springboot]操作记录</title>
      <link>http://j.noloss.cn/post/springboot_tricks/</link>
      <pubDate>Tue, 26 Feb 2019 15:40:15 +0800</pubDate>
      
      <guid>http://j.noloss.cn/post/springboot_tricks/</guid>
      <description>[TOC]
一、springboot获取http参数的方法 1.将参数写做变量名的形参 GET POST 参数为空时变量值为null
/** * 1.直接把表单的参数写在Controller相应的方法的形参中 * @param username * @param password * @return */ @RequestMapping(&amp;quot;/login&amp;quot;) public String login(String username,String password) { System.out.println(&amp;quot;username is:&amp;quot;+username); System.out.println(&amp;quot;password is:&amp;quot;+password); ... ... }  2.使用注解@RequestParam绑定参数 GET POST
不传值时将会报错，可以通过设置属性required=false解决,例如: @RequestParam(value=&amp;ldquo;username&amp;rdquo;, required=false)
{ &amp;quot;timestamp&amp;quot;:&amp;quot;2019-02-26T07:56:44.039+0000&amp;quot;, &amp;quot;status&amp;quot;:400, &amp;quot;error&amp;quot;:&amp;quot;Bad Request&amp;quot;, &amp;quot;message&amp;quot;:&amp;quot;Required String parameter &#39;sTime&#39; is not present&amp;quot;, &amp;quot;path&amp;quot;:&amp;quot;/login&amp;quot; }  /** * @param username * @param password * @return */ @RequestMapping(&amp;quot;/login&amp;quot;) public String login( @RequestParam(&#39;username&#39;) String username, @RequestParam(&#39;username&#39;) String username) { System.</description>
    </item>
    
    <item>
      <title>计算机数理逻辑</title>
      <link>http://j.noloss.cn/post/logic/</link>
      <pubDate>Thu, 10 Jan 2019 09:09:59 +0800</pubDate>
      
      <guid>http://j.noloss.cn/post/logic/</guid>
      <description>[TOC]
Binary Decision &amp;amp; Graph Based Algorithm 二叉有向无环/左0右1 Shannon deduction - two situation(same result,same 结构) - code 图和表达式相互转换 测试集 *!The Quest for Efficient Boolean Satisfiability Solvers 给定一个命题公式，确定是否存在变量赋值使得公式求值为true称为布尔可满足性问题，通常缩写为SAT。
这项研究已经导致了几种SAT算法的开发看到了实际成功。 其中一些算法是 完整的 ，而其他算法是 随机方法。
近年来基于搜索的算法基于着名的Davis-Logemann-Loveland算法(因为历史原因有时称为DPLL算法）正在成为一些最有效的SAT求解器。
基于DPLL的SAT求解器是一个相对较小的软件。 许多求解器只有几千行代码（这些求解器是出于效率原因，主要用C或C ++编写。 但是，涉及的算法非常复杂，很多注意力都集中在求解器的各个方面例如编码，数据结构，选择算法和启发式，以及参数调整。 尽管整体框架已经得到了很好的理解，但人们已经有了在这方面工作多年，似乎我们已经达到了什么样的稳定水平可以在实践中实现 - 但是我们觉得许多开放性问题仍然存在，这提供了许多研究机会。
基本的DPLL框架&amp;amp;代码 为了求解器的效率，通常使用命题公式实例在Sum形式的产品中呈现，通常称为 Conjunctive Normal Form
（ CNF ）。将任何命题公式转换为一个CNF公式具有与原命题相同的可满足性。
CNF中一个SAT实例是 一个或多个子句 的 逻辑 和 ，其中每个子句是 一个或更多的 字面量 的逻辑或 。 字面量是一个正的或负的变量 。
如果公式中存在一个包含所有子句的字面量为0，然后是当前变量赋值或任何变量包含此内容的赋值将无法满足公式。 有一个子句分配给值0的所有字面量称为 冲突子句 。？
最初，没有对变量赋值。 我们将未分配的变量称为 自由变量。 开始求解器将对要解决的实例进行一些预处理，由函数preprocess()。如果预处理无法确定结果，则主要循环自由变量上的分支开始，为其赋值。 我们称之为操作对变量的 决策 ，变量将具有决策级别与之相关联，从1开始并随后的决定递增。这是由函数decision_next_branch()完成。在分支之后，由于这一决定及其后果，问题得到了简化。 功能deduce()执行一些推理来确定变量赋值在目前的一系列决策下，问题是可以满足的。变量在分支机构承担后，由此扣除分配的结果与决策变量相同的决策级别。 扣除后，如果所有条款都是满足，那么实例是可以满足的; 如果存在冲突子句，那么选择的当前分支不能导致令人满意的赋值，因此求解器将会回溯。要回溯到哪个决策级别由analyze_conflict()函数确定。回溯到0级表示即使没有任何分支，实例仍然是不可满足的。在那种情况下，求解器将声明该实例不可满足。 在功能内analyze_conflict()，解算器可以做一些分析并记录一些来自当前冲突的信息，以便为未来修剪搜索空间。这个过程称为 冲突驱动的学习 。如果实例既不满足也不满足在当前变量赋值下冲突，求解器将选择另一个变量分支并重复该过程。</description>
    </item>
    
    <item>
      <title>面向对象技术</title>
      <link>http://j.noloss.cn/post/mse/</link>
      <pubDate>Sat, 05 Jan 2019 23:52:37 +0800</pubDate>
      
      <guid>http://j.noloss.cn/post/mse/</guid>
      <description>[TOC]
面向对象 类型：人们出于不同的目的,按照客观事物的特性、行为或用途，把它们分成不同的种类,每一种类就是一个类型。
基本类型：固有的数据类型
值集描述：枚举法，限定法，构造法。
操作集描述：语法+语义
自定义类型：基本类型和类型构造符（struct enum type）
定义&amp;amp;构造：构造需要定义作用在值集上的所有操作
类型系统：一组相互关联的类型，它们的实例协同工作，实现一个共同的目标。
类型化：语言的内在属性。静态类型化语言（它的每个表达式的类型在静态程序分析(例如编译)时是确定的。在所有的程序构造中,每个类型在编译时是已知的。）；强类型化语言（它的每个表达式保证是类型一致的。即允许有些表达式的类型本身是静态未知的,但可以用引入运行时的类型检验(或推理)来做到。）
类型系统作用：抽象作用（分类地表示客观世界事物）、限制作用（防止逻辑单元间交互作用的不一致）。
声明：定义声明和非定义声明（先承认再核实）。
数组：同质数组，异质数组。记录-》struct
指针：其值是某块内存的地址。与某个类型T相关。值集是合法地址构成的集合。用途：1同一存储空间分时存储多个类型的值。2一组同类型数据不同操作，但是要求原始存储位置不动。3不需要知道数组元素下标的情况下使用指针访问。
1 常量与非常量指针 const int c1 = 1;//c1 : 其值是常量，必须在定义时给定值 int const c2 = 2;//c2 : 同c1 const int * p1; //p1 : 指向“整型常量”的指针 int const * p2; //p2 : 同p1 2 指针常量 char a = ‘A’; char * const cp =&amp;amp;a; // cp: const pointer to a char char s[ ] = “张三”; // s: char array const char *const cpc =s; // cpc: const pointer to a const char  引用：另一个已存在对象的别名，二者代表同一块内存空间。已存在，不能再引用其他对象。1 作为函数形参避免实参被复制 2 作为函数返回值 避免返回值被复制（返回调用点需要变量仍然存活）</description>
    </item>
    
    <item>
      <title>SOM - 自组织映射</title>
      <link>http://j.noloss.cn/post/som/</link>
      <pubDate>Wed, 02 Jan 2019 15:00:55 +0800</pubDate>
      
      <guid>http://j.noloss.cn/post/som/</guid>
      <description>  竞争学习（competitive learning） 网络的输出神经元之间相互竞争以求被激活或点火，结果在每一时刻只有一个输出神经元，或者每组只有一个输出神经元被激活。 胜者全得（winner-takes-all） 负反馈路径 神经元被放置在网格节点中。在竞争学习过程中，神经元变化依照不同输入模式或者其类别选择性调整。 由输入模式的拓扑结构表征，网格神经元的空间位置表示输入模式包含在内的统计特征。？？  自组织映射在两个自适应层次之间提供一个桥梁：
 单个神经元的尾款层次形成自适应规则 神经元层次的微观层上形成特征选择在实验上更好的和具体可实现的模式？？  两个基本的特征映射模型 大脑将不同的感觉输入以一种有序的方式映射到相应的大脑皮质区域。
特性：
 表示的每个阶段，每一个新来的信息片段保持在它合适的位置中 处理高度相关的信息片段的神经元被紧紧地联系到一起，通过短的突触连接使得它们能够交互  在拓扑映射中输出神经元的空间位置对应于特殊的定义域或从输入空间抽取数据的特征。
这种拓扑确保每个神经元都有一组领域。？？图a用于解释从视网膜到视觉皮质的视觉映射的问题。
现实中，Kohonen模型属于向量-编码（vector-coding）算法的类型。模型设置一个拓扑映射，最优地设置固定数目的向量到高维输入空间，因此有利于数据压缩。
自组织映射 主要目的：将任意维度的输入信号模式转变为一维或者二维的离散映射，并且以拓扑有序的方式自适应实现这个变换。
网络突触权值的初始化。
自组织映射的形成中有三个过程：
 竞争。对每个输入模式，网络中的神经元计算它们各自的判别函数的值。判别函数为神经元之间的竞争提供基础，具有判别函数最大值的特定神经元称为竞争的胜利者。 合作。获胜神经元决定兴奋神经元的拓扑领域的空间位置，从而提供这样的相邻神经元合作的基础。 突触调节。使兴奋神经元通过对它们突触权值的适当调节以增加他们关于该输入模式的判别函数值。所做的调节使获胜神经元对以后相似输入模式的响应增强了。  竞争过程 </description>
    </item>
    
    <item>
      <title>LCA&amp;PDA</title>
      <link>http://j.noloss.cn/post/lca_and_pda/</link>
      <pubDate>Fri, 28 Dec 2018 23:09:59 +0800</pubDate>
      
      <guid>http://j.noloss.cn/post/lca_and_pda/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SVM - 支持向量机</title>
      <link>http://j.noloss.cn/post/svm/</link>
      <pubDate>Fri, 28 Dec 2018 15:23:36 +0800</pubDate>
      
      <guid>http://j.noloss.cn/post/svm/</guid>
      <description>  通用逼近器。 通用的前反馈网络。 用于模式分类和非线性回归。 线性机器。 主要思想：建立一个超平面作为决策曲面，使得正例和反例之间的隔离边缘被最大化。 结构风险最小化方法的近似实现。 构造关键：在“支持向量”和输入空间抽取的向量x之间的内积核。  构建三种类型： - 多项式学习机器 - 径向基函数网络 - 两层感知器
线性可分模型的最优超平面 假定输入模式线性可分，用于分离的超平面的决策曲面方程是： wx+b=0 从该平面到最近的数据点之间的距离间隔被称为分离边缘，用ρ表示。svm的目标是找到一个特殊的超平面，使得分离边缘ρ最大。在此条件下，决策曲面被称为最优超平面。
支持向量指的是那些靠近决策面的数据点。满足第一行或第二行情况的特殊数据点（xi,di)称为支持向量。这些向量在学习机器中起着主导作用。
让ρ表示在两个类之间的分离边缘的最优值，其中这两个类构成训练集合
用于寻找最优超平面的二次最优化 </description>
    </item>
    
    <item>
      <title>RBFN - 径向基函数网络</title>
      <link>http://j.noloss.cn/post/rbfn/</link>
      <pubDate>Thu, 27 Dec 2018 21:33:59 +0800</pubDate>
      
      <guid>http://j.noloss.cn/post/rbfn/</guid>
      <description>概念解释： vector &amp;lt;=&amp;gt; patern 即 向量和模式的概念在此文中是相同的。  [TOC]
RBF( 径向基函数网络 )  将神经网络的设计看作是一个高维空间的曲线拟合（逼近）问题，采用不用的方法进行设计。 学习 =&amp;gt; 在多维空间中寻找一个能够最佳拟合(统计意义上的)训练数据的曲面。 泛化 =&amp;gt; 利用多维曲面对测试数据进行插值。（?多维空间中传统的严格插值法）  神经网络中的隐藏单元提供一个“函数”集，该函数集在输入模式（向量）拓展至隐藏空间时为其构造了一个任意的“基”；这个函数集中的函数就称为径向基函数。
最基本形式的径向基函数网络(RBFN)由三层构成：
 输入层：源点（感知单元），网络与外界环境连接。 隐层：非线性变换 输出层：现行，为输入层的激活信号提供响应。  大多数情况下隐藏空间具有较高的维数，隐藏空间维度越高，逼近就越精确。
模式可分性的Cover定理 当使用RBF解决问题时，将 复杂的模式分类问题 非线性地 投射 到 高维空间 将比投射到 低维空间 更可能是 线性可分的。(根据Cover的论文)
具有线性可分性的分类问题更容易解决，通过RBF网络作为模式分类器更易得到线性可分。
给定一族曲面，每个曲面都能自然地将输入空间自然地分成两个区域。用 $ V$代表$N$个模式（向量）$\mathbf{x}_1&amp;hellip;\mathbf{x}_N$的集合，每一个都分属于$\mathbf{V}_1$和$\mathbf{V}_2$中的一类。如果这族曲面中存在 一个 曲面能把分属于$\mathbf{V}_1$和$\mathbf{V}_2$的点分成两部分，则称这些点的二元划分关于这族曲面是 可分 的。
对于每一个模式向量$x∈V$，定义一个由一组实值函数$f$组成的向量$F$。假设模式$x$是$\mathbf{m}_0$维向量上的点，则函数将$\mathbf{m}_0$维输入空间的点映射到新的$\mathbf{m}_1$维空间的对应的点上。将$f$称为隐藏函数，它与前反馈神经网络中的隐藏单元起着相同的作用。生成的新的空间被称为隐藏空间或者特征空间。
当一个关于$V$的二分${\mathbf{V}_1,\mathbf{V}_2}$是$F$可分的，如果存在m1维的向量w使得，
wfx &amp;gt; 0,x属于v1
wfx &amp;lt; 0,x属于v2
由wfx=0定义的超平面描述的F空间(也就是隐藏空间)中的分离曲面。？这个超平面的逆像，即定义输入空间中的分离曲面？
用r次模式向量坐标乘积的线性组合实现一个自然类映射。相对应的分离曲面被称为r阶有理簇。一个m0维空间的r阶有理簇，可描述为输入向量x的坐标的r次齐次方程，表示为
为了用齐次方程，将x0的值置为单位1。对于一个m0维的输入空间在式子中一共有 $(m0-r)!/m0!r!$ 个单项式。
该式可以描述分离曲面的的例子有超平面（一阶），二次曲面（二节），超球面（带有线性限制的二次曲面）等。通常情况下，线性可分性暗示着球面可分性，而球面可分性又暗示着二次可分性；然而反之不一定成立。（注：低维可分则高维可分，高维可分不一定低维可分）
在概率实验中，一个模式集合的可分性成为一个依赖于选择的二分以及输入空间中模式分布的随机事件。假设激活模式（输入向量）是根据空间中的概率特性独立随机选取的。同时假设所有的向量是等概率二分。令P表示某一随机选取的二分是f可分的概率，被选中的分离曲面有m1维自由度，根据Cover，
P(N,m1) = (1&amp;frasl;2)^(N-1)*cigma(C(m,N-1))
相当于抛N-1次硬币有m1-1次或更少头像向上的概率
模式可分性的Cover定理包含两个基本方面：
 由fi定义的隐藏函数的非线性构成 高维数的隐藏空间  如果在新的m1维空间中存在超平面使得fx可分，则该定义该超平面为隐藏空间（f空间）的分离曲面。</description>
    </item>
    
    <item>
      <title>Docker 应用导论</title>
      <link>http://j.noloss.cn/post/docker_introduction/</link>
      <pubDate>Fri, 23 Nov 2018 22:49:22 +0800</pubDate>
      
      <guid>http://j.noloss.cn/post/docker_introduction/</guid>
      <description>一.安装 根据官网指引安装即可： https://docs.docker.com/install/
二.概念解释 镜像（image）&amp;amp; 容器（container）：镜像和容器的关系类似于操作系统中 [程序] 和 [进程] 的关系，镜像中包含应用中所需要的所有文件内容，运行当中的镜像实例，则被称为容器。
服务（service）&amp;amp; 栈（stack）：笔者简单理解为，单机中多容器应用的部署使用的是service工具，在集群当中部署服务时，则需要栈工具。
集群（swarm）：一系列运行docker的主机，使用swarm进行统一的配置和管理。
三.应用 部署单机多容器开发环境(以开源项目laradock为例)  docker-compose  compose可以用来定义和管理多容器应用，通过配置yaml格式的文件，定义所需要的容器版本以及环境变量。
通过docker-compose build建立配置中设定的容器。
docker-compose up和docker-compose down分别管理应用的开启和关闭。
 容器的ip地址  每次容器启动时，都会获得一个docker内网ip地址，可通过以下命令获取：
docker inspect --format=&#39;{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&#39; $(docker ps -aq)
容器之间通信即使用此ip地址。
laradok是一个全面的PHP单机开发环境，可选择安装单机应用所需要的容器。 仅需要三步即可在docker中运行PHP应用。
 1 git clone https://github.com/Laradock/laradock.git 2 cp env-example .env 3 docker-compose up -d nginx mysql phpmyadmin redis workspace  通过浏览器 http://localhost 即可看到页面运行的结果。
laradock默认安装当前最新发行版，对于一些基于老版本开发的项目可能会出现冲突的情况，此时需要修改镜像的版本，重新拉取：
1 修改laradock/.env 中容器版本**_VERSION={需要的版本} 2 运行 docker-compose build --no-cache {image-name}  laradock 将 [laradock文件所在目录] 映射到/var/www/目录中， [容器配置文件]在 laradock/{container-name}/中。</description>
    </item>
    
    <item>
      <title>[译]我是如何用go写HTTP服务的</title>
      <link>http://j.noloss.cn/post/how_i_write_go_http_services/</link>
      <pubDate>Fri, 03 Aug 2018 15:46:03 +0800</pubDate>
      
      <guid>http://j.noloss.cn/post/how_i_write_go_http_services/</guid>
      <description>自从go pre1.0版本，我就在使用go来构建HTTP API/Service。在我的Machin eBox项目中，需要构建大量的API来使之易用。
这些年来，我构建服务的方式一直在变化，我想和大家分享一下现在所用的模式，希望能够帮到大家。
服务类型结构体 所有的组件都有一个单独的server结构如下：
type server struct{ db *someDatabase router *someRouter email EmailSender }  结构体中部分字段是他们共享的依赖(或者说是配置)。
routes.go 在每个组件中都有一个文件routes.go包含所有的路由：
package app func (s *server) routes(){ s.router.HandleFunc(&amp;quot;/api/&amp;quot;,s.handleAPI()) s.router.HandleFunc(&amp;quot;/about&amp;quot;,s.handleAbout()) s.router.HandleFunc(&amp;quot;/&amp;quot;,s.handleIndex()) }  方便代码维护，在此文件中可以很快找到代码所在位置。
Handlers接受服务 func (s *server) handleSomething() http.HandleFunc {...}  Handler可以通过s变量获取相关依赖(配置)。
返回Handler handler不处理请求，而是返回一个处理请求的函数。
函数在闭包中运行。
func (s *server) handleSomething() http.HandlerFunc { thing := prepareThing() return func(w http.ResponseWrier,r *http.Request){ // use thing } }  prepareThing只被调用一次，所以可用用来做初始化，然后将thing用于handler。
如果要修改共用文件，记得需要互斥量或者其他机制来保护。
获取handler特定的配置 handler需要特殊的配置时，可以将其作为一个参数。
func (s *server) handleGreeting(format string) http.</description>
    </item>
    
    <item>
      <title>go部分重点记录</title>
      <link>http://j.noloss.cn/post/points_in_go/</link>
      <pubDate>Mon, 30 Jul 2018 10:06:05 +0800</pubDate>
      
      <guid>http://j.noloss.cn/post/points_in_go/</guid>
      <description>go语言的字符(串) Strings, bytes, runes and characters in Go
首先搞清楚字符串的储存方法，对于一个字符串从bytes角度来看是一视同仁的，不管你存的是什么字符、能不能输出，都是以二进制字节为单位存着。
ASCII：固定8bit
UTF8：变长，可用1-4个字节表示一个符号，根据不同的符号变化字节长度。
go语言中，源代码存储格式是UTF8，因此字符串字面量(string literals)一般也是UTF8编码
在Unicode中，将一个character定义为一个code unit，在go中对照的有rune类型。在range方法遍历字符串数组时，会按照变长类型区分字符。（汉字占3字节，数字英文占一字节）
可以使用package unicode/utf8 对字符串进行操作， 如： fmt.Println(utf8.RuneCountInString(s)) 可获取rune类型字符数。
字符串输出:
   符号 输出 exmple     %x 单个字节16进制表示 fmt.Printf(&amp;ldquo;%x&amp;rdquo;,sample)   %q 无法打印字符用单个字节16进制表示 fmt.Printf(&amp;ldquo;%q&amp;rdquo;,sample)   %+q 无法打印字符用单个字节16进制表示，非ASCII码打印其Unicode编码 fmt.Printf(&amp;ldquo;%+q&amp;rdquo;,sample)    strings of go
dive-into-go-1
数组与切片 数组：有限的同一元素类型的对象的序列。定长。 Slice：描述数组的一个连续的片段。[)
type SliceHeader struct{ Data uintptr Len int Cap int }  数组可能在数组和多个slice中公用，会导致修改异步问题。
数据类型转换 结构体匿名字段 鸭子类型 duck typing</description>
    </item>
    
    <item>
      <title>魔术方法和重载</title>
      <link>http://j.noloss.cn/post/magic_method_and_overload/</link>
      <pubDate>Thu, 19 Jul 2018 11:28:05 +0800</pubDate>
      
      <guid>http://j.noloss.cn/post/magic_method_and_overload/</guid>
      <description>标签： PHP
新标签中打开可查看大图
魔术方法简要叙述 __construct&amp;amp;__destruct 构造函数与析构函数，这两个函数在许多编程语言中均有实现。 PHP中比较特殊的是，需要以双下划线开头，(&amp;gt;=5.4)。与类名同名的函数不再作为构造函数。要执行父类的构造函数，需要在子类构造函数中调用：parent::__construct()
__get&amp;amp;__set&amp;amp;__isset&amp;amp;__unset 在访问不可访问属性时将会触发此类函数,原本的操作反而不会执行。此类函数可以用来实现类的getter与setter，但是对于PHP这种效率为王的语言，开发者们多半不会考虑此类繁琐的事情。 实现代码如下：
&amp;lt;?php class Magic{ protected $pro1; protected $pro2; function __get($pro){ echo &amp;quot;__get is running and is getting {$pro}\n&amp;quot;; return $this-&amp;gt;$pro; } function __set($pro,$value) { echo &amp;quot;__set is running and is seting {$pro} as {$value}\n&amp;quot;; $this-&amp;gt;$pro = $value; } function __isset($pro) { return isset($this-&amp;gt;$pro); echo &amp;quot;__isset is running and is checking {$pro}.\n&amp;quot;; } function __unset($pro) { unset($this-&amp;gt;$pro); echo &amp;quot;__unset is running and is checking {$pro}.</description>
    </item>
    
    <item>
      <title>代码规范</title>
      <link>http://j.noloss.cn/post/code_standard/</link>
      <pubDate>Thu, 19 Jul 2018 11:23:04 +0800</pubDate>
      
      <guid>http://j.noloss.cn/post/code_standard/</guid>
      <description>标签：PHP
写代码如写文章，在实现功能的基础上，易读性是不容忽视的，一定要注意注释和必要文档的书写，不光有利于自己和其他工程师的开发，而且有益于同事之间的相处。
一般语言代码规范 这里的一般语言指的是常见的常用的编程语言。
注释编写 解释关键变量含义以及函数功能，格式符合IDE规范，尽量让在读代码的工程师不用进入到源码函数声明就知道函数的作用。
 文件属于哪个包那个类 包含哪些功能操作 注意事项  变量命名 除getter，setter , 构造，析构函数等之外，自定义函数名及变量需要注意在他人阅读时的易读性。
 选词专业、通用 动词+名词+介词+名词。表明该函数的工作以及依赖的操作或其他介质  为了美观  在多行代码均有赋值型操作时，美化代码让每行的等号对齐。 等号及逻辑符号前后要加空格。 箭头（引用）调用，即-&amp;gt;funcName()，如果存在多条，可换行书写。 代码中插入其他语言的代码作为字符串，如SQL，遵守该种代码的书写格式。  下面将用PHP代码演示：
示例代码片段 &amp;lt;?php /* * This file is part of the {project} * * (c) {nickname} &amp;lt;{email}&amp;gt; * * [This source file is subject to the MIT license that is bundled * with this source code in the file LICENSE.] */ namespace Code\Kernel\Standard; use PHP\Standard\Psr as JutssamStandard; /** * {ClassName}[ ：{ Introducetion .</description>
    </item>
    
    <item>
      <title>[译] PHP虚拟机</title>
      <link>http://j.noloss.cn/post/php_vitual_machine/</link>
      <pubDate>Sun, 01 Jul 2018 12:32:13 +0800</pubDate>
      
      <guid>http://j.noloss.cn/post/php_vitual_machine/</guid>
      <description>标签： PHP
本篇文章旨在提供一个对PHP7版本中Zend虚拟机的概述，不会做到面面俱到的详细叙述，但尽力包含大多数重要的部分，以及更精细的细节。
这篇文章描述的主要背景是PHP版本7.2（当前正在开发版本），但几乎同样适用于PHP7.0/7.1版本中。然而，PHP5.x系列版本的虚拟机之间差别比较显著，笔者不会去比较。
本文的大部分内容将在指令列表级别进行考虑，最后只有几节讨论VM的实际C语言实现。但是，我确实想提供一些组成VM前端的主要文件：
 zend_vm_def.h：VM定义文件 zend_vm_execute.h：生成的虚拟机文件 zend_vm_gen.php：生成脚本 zend_execute.c：大多数直接支持文件  操作码 （Opcodes） 首先我们来谈一下操作码，“操作码”是指完整的VM指令(包括操作数)，但也可以只指定“实际”操作代码&amp;ndash;一个决定指令类型的小整数。从上下文来看，指令的意图应该是清晰的。在文件源码中，完整的指令通常被称为Opline。
一个独立的指令遵循如下zend_op结构体：
struct _zend_op { const void *handler; znode_op op1; znode_op op2; znode_op result; uint32_t extended_value; uint32_t lineno; zend_uchar opcode; zend_uchar op1_type; zend_uchar op2_type; zend_uchar result_type; };  如上，操作码实质上是“三地址”指令格式。其中‘opcode’决定指令类型，还有两个输入的操作数‘op1’和‘op2’以及一个输出操作数‘result’。
并不是所有的指令都会用到所有的操作数。ADD指令（代表+操作符）会用到三个操作数。BOOL_NOT指令（代表！操作符）只用到op1和result。ECHO指令只会用到op1操作符。有些指令甚至可以使用或者不使用操作符。例如，DO_FCALL可以使用或者不使用result操作符，具体取决于是否使用函数调用的返回值。有些指令需要两个以上输入操作数，在这种情况下，只需要使用第二个虚拟指令/伪指令（OP_DATA）来携带额外的操作数。
除了这三个标准操作数之外，还有一个附加的数值extended_value 字段，可以用来保存附加的指令修饰符。例如，对于强制转换（CAST），它可能包含要强制转换的目标类型。
每个操作数都有对应的一个类型，分别存储在op1_type, op2_type和result_type中。可能的类型有IS_UNUSED, IS_CONST, IS_TMPVAR, IS_VAR and IS_CV。
后三种类型指定变量操作数(有三种不同类型的VM变量)，IS_CONST表示常量操作数(5或“String”或偶数[1，2，3])，而IS_UNUSED表示实际未使用的操作数，或作为32位数值(汇编术语中的“立即”)使用的操作数。例如，跳转指令将跳转目标存储在未使用的操作数中。
获取操作指令（Obtaining opcode dumps) 接下来，笔者将经常列出PHP代码生成的操作码序列。目前有三种方法可以将这些操作码转储：
# Opcache, since PHP 7.1 php -d opcache.opt_debug_level=0x10000 test.php # phpdbg, since PHP 5.</description>
    </item>
    
  </channel>
</rss>